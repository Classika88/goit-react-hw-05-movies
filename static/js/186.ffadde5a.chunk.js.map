{"version":3,"file":"static/js/186.ffadde5a.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","components/Reviews/Reviews.styled.js","services/MoviesApi.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsById } from 'services/MoviesApi';\nimport { Author, Content, Notification } from './Reviews.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) return;\n    const getReviews = async movieId => {\n      try {\n        setLoading(true);\n        const reviews = await getReviewsById(movieId);\n        setReviews(reviews);\n        setError('');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length === 0 && (\n        <Notification>We don't have reviews about this movie</Notification>\n      )}\n      {!loading && !error && reviews && (\n        <ul>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <Author>Author: {author}</Author>\n                <Content>{content}</Content>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {loading && !error && <Loader />}\n    </>\n  );\n};\n\nexport default Reviews;\n","import styled from 'styled-components';\n\nexport const Author = styled.p`\n  font-size: 24px;\n  font-weight: 500;\n`;\n\nexport const Content = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const Notification = styled.p`\n  font-size: 24px;\n  line-height: 1.5;\n  font-style: italic;\n  margin-bottom: 30px;\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '63801254b5c460a3de0676d2e1a253d2';\n\nexport const getPopularFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get('/trending/movie/day', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n};\n\nexport const getSearchFilms = async query => {\n  const params = {\n    query,\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n};\n\nexport const getFilmsById = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: getPoster(poster_path),\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n};\n\nexport const getActorsById = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${id}/credits`, { params });\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: getPoster(profile_path),\n  }));\n  return credits;\n};\n\nexport const getReviewsById = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${id}/reviews`, { params });\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n};\n\nconst getPoster = url => 'https://image.tmdb.org/t/p/w500' + url;\n"],"names":["useState","reviews","setReviews","loading","setLoading","movieId","useParams","error","setError","useEffect","getReviews","getReviewsById","message","length","map","id","author","content","Author","styled","Content","Notification","axios","API_KEY","getPopularFilms","params","api_key","language","data","movies","results","original_title","getSearchFilms","query","getFilmsById","poster_path","release_date","vote_average","overview","genres","getPoster","slice","toFixed","name","join","getActorsById","credits","cast","profile_path","url"],"sourceRoot":""}