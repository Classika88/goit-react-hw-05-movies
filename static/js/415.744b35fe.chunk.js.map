{"version":3,"file":"static/js/415.744b35fe.chunk.js","mappings":"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","sources":["components/MovieLink/MovieLink.styled.js","components/MovieLink/MovieLink.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/MoviesApi.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Title = styled.h1`\n  color: #000;\n  padding-left: 40px;\n  font-weight: 700;\n  font-size: 24px;\n`;\n\nexport const MovieItem = styled(NavLink)`\n  font-size: 20px;\n  margin-bottom: 20px;\n  display: block;\n  color: #2b4749;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { MovieItem } from './MovieLink.styled';\n\nconst MovieLink = ({ name, id }) => {\n  const location = useLocation();\n  return (\n    <MovieItem>\n      <NavLink to={`/movies/${id}`} state={{ from: location }}>\n        {name}\n      </NavLink>\n    </MovieItem>\n  );\n};\n\nMovieLink.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default MovieLink;\n","import MovieLink from 'components/MovieLink/MovieLink';\nimport propTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(({ id, original_title }) => {\n        return <MovieLink key={id} name={original_title} id={id} />;\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: propTypes.array.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getPopularFilms } from 'services/MoviesApi';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Title } from 'components/MovieLink/MovieLink.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        setLoading(true);\n        const data = await getPopularFilms();\n        setMovies(data);\n        setError('');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getMovies();\n  }, []);\n\n  return (\n    <>\n      {!loading && !error && movies && (\n        <div>\n          <Title>Trending today:</Title>\n          <MoviesList movies={movies} />\n        </div>\n      )}\n      {loading && !error && <Loader />}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '63801254b5c460a3de0676d2e1a253d2';\n\nexport const getPopularFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get('/trending/movie/day', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n};\n\nexport const getSearchFilms = async query => {\n  const params = {\n    query,\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n};\n\nexport const getFilmsById = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: getPoster(poster_path),\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n};\n\nexport const getActorsById = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${id}/credits`, { params });\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: getPoster(profile_path),\n  }));\n  return credits;\n};\n\nexport const getReviewsById = async id => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${id}/reviews`, { params });\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n};\n\nconst getPoster = url => 'https://image.tmdb.org/t/p/w500' + url;\n"],"names":["Title","styled","MovieItem","NavLink","name","id","location","useLocation","to","state","from","MoviesList","movies","map","original_title","useState","setMovies","loading","setLoading","error","setError","useEffect","getMovies","getPopularFilms","data","message","axios","API_KEY","params","api_key","language","results","getSearchFilms","query","getFilmsById","poster_path","release_date","vote_average","overview","genres","getPoster","slice","toFixed","join","getActorsById","credits","cast","profile_path","getReviewsById","reviews","author","content","url"],"sourceRoot":""}